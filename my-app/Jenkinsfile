pipeline {

    // The agent name must match with the jenkins node name (Manage jenkins -> Nodes)
    agent {
        node {
            label 'maven_build_server'
        }
    }

    // The tool name must match with the jenkins tools (global configuration) variable names
    tools {
        maven 'Maven-3.9.8'
    }

    // Define environment variables
    environment {
        APP_NAME = "Suyog_APP"
        APP_ENV  = "PRODUCTION"
    }

    // Cleanup the jenkins workspace before building an Application
    stages {
        // Build the application code using Maven
        stage('Code Build') {
            steps {
                 sh '''
                 cd /home/jenkins/workspace/full-ci/my-app
                 mvn install -Dmaven.test.skip=true
                 '''
            }
        }
        stage('SonarQube Analysis') {
            environment {
                // Tool name must match with Jenkins Tools for Sonar Scanner - Manage Jenkins >> Tools
                scannerHome = tool 'sonar-scanner'
                }
            steps {
                // Env value must match with the Sonar Server Name - Manage Jenkins >> System
                withSonarQubeEnv('sonarqube-server') {
                sh '''
                    cd /home/jenkins/workspace/full-ci/my-app
                    ${scannerHome}/bin/sonar-scanner
                    '''
                }
            }
        }
        stage('Unit Testing Stage') {
            steps {
                sh '''
                cd /home/jenkins/workspace/full-ci/my-app
                mvn surefire-report:report
                '''
            }
        }
        stage('Quality Gate'){
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') { // In case something goes wrong, pipeline will be killed after a timeout
                    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage("Jar Publish") {
            steps {
                script {
                    echo '<--------------- Started Publishing Jar --------------->'
                    def registry = 'https://suyoghost.jfrog.io'
                    def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"artifactory_token"
                    def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                    def uploadSpec = """{
                        "files": [
                        {
                            "pattern": "jarstaging/(*)",
                            "target": "libs-release-local/{1}",
                            "flat": "false",
                            "props" : "${properties}",
                            "exclusions": [ "*.sha1", "*.md5"]
                        }
                        ]
                    }"""
                    def buildInfo = server.upload(uploadSpec)
                    buildInfo.env.collect()
                    server.publishBuildInfo(buildInfo)
                    echo '<--------------- Jar Published Successfully --------------->'
            }
          }
        }
    }
}
